name: Create Release Note

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release
        id: get_latest_release
        uses: bruceadams/get-release@v3.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generate Changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          FEATURES=$(echo "$CHANGELOG" | grep -i "✨" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "🐛" || echo "")
          CHORES=$(echo "$CHANGELOG" | grep -i "🔧" || echo "")
          BREAKING=$(echo "$CHANGELOG" | grep -i "💥" || echo "")
          DOCS=$(echo "$CHANGELOG" | grep -i "📚" || echo "")
          STYLE=$(echo "$CHANGELOG" | grep -i "🎨" || echo "")
          REFACTOR=$(echo "$CHANGELOG" | grep -i "♻️" || echo "")
          PERFORMANCE=$(echo "$CHANGELOG" | grep -i "⚡️" || echo "")
          TEST=$(echo "$CHANGELOG" | grep -i "🚨" || echo "")
          BUILD=$(echo "$CHANGELOG" | grep -i "👷" || echo "")
          CI=$(echo "$CHANGELOG" | grep -i "🔨" || echo "")
          
          CURRENT_DATE=$(date '+%Y-%m-%d')
          echo "## Changelog" >> release_notes.md
          echo "" >> release_notes.md
          
          if [ ! -z "$BREAKING" ]; then
            echo "### 💥 Breaking Changes" >> release_notes.md
            echo "$BREAKING" | sed 's/💥/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$FEATURES" ]; then
            echo "### ✨ Features" >> release_notes.md
            echo "$FEATURES" | sed 's/✨/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> release_notes.md
            echo "$FIXES" | sed 's/🐛/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$REFACTOR" ]; then
            echo "### ♻️ Refactoring" >> release_notes.md
            echo "$REFACTOR" | sed 's/♻️/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$PERFORMANCE" ]; then
            echo "### ⚡️ Performance Improvements" >> release_notes.md
            echo "$PERFORMANCE" | sed 's/⚡️/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$DOCS" ]; then
            echo "### 📚 Documentation" >> release_notes.md
            echo "$DOCS" | sed 's/📚/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$STYLE" ]; then
            echo "### 🎨 Style Changes" >> release_notes.md
            echo "$STYLE" | sed 's/🎨/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$TEST" ]; then
            echo "### 🚨 Tests" >> release_notes.md
            echo "$TEST" | sed 's/🚨/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$BUILD" ]; then
            echo "### 👷 Build System" >> release_notes.md
            echo "$BUILD" | sed 's/👷/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$CI" ]; then
            echo "### 🔨 CI" >> release_notes.md
            echo "$CI" | sed 's/🔨/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ ! -z "$CHORES" ]; then
            echo "### 🔧 Chores" >> release_notes.md
            echo "$CHORES" | sed 's/🔧/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "RELEASE_TITLE=$CURRENT_DATE" >> $GITHUB_ENV
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_TITLE }}
          body: ${{ env.RELEASE_BODY }}
          generate_release_notes: true
          files: |
            app/dist/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ github.token }} 